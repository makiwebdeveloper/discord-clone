generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @map("user_id")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email          String?   @unique
  username       String?   @unique
  emailVerified  DateTime? @map("email_verified")
  name           String?
  image          String?
  hashedPassword String?   @map("hashed_password")

  accounts Account[]
  sessions Session[]

  createdServers Server[]
  members        Member[]
}

model Server {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name       String
  image      String?
  inviteCode String  @unique

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String @map("owner_id")

  members  Member[]
  channels Channel[]

  @@index([ownerId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  role     MemberRole @default(GUEST)
  server   Server     @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId String     @map("server_id")
  user     User       @relation(fields: [userId], references: [id])
  userId   String     @map("user_id")

  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String
  type ChannelType @default(TEXT)

  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId String @map("server_id")

  @@index([serverId])
}
